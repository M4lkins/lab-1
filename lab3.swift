import Foundation

// MARK: - –ü—Ä–æ—Ç–æ–∫–æ–ª Shape

protocol Shape {
    func area() throws -> Double
    func perimeter() -> Double
}

// MARK: - –ü–æ–º–∏–ª–∫–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó

enum LineError: Error {
    case invalidLength
}

enum TriangleError: Error {
    case notATriangle
}

enum RectangleError: Error {
    case invalidDimensions
}

// MARK: - –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è

enum ShapeError: Error {
    case negativeArea
}

// MARK: - –ö–ª–∞—Å–∏ —Ñ—ñ–≥—É—Ä

class Line: Shape {
    let length: Double

    init(length: Double) throws {
        guard length > 0 else {
            throw LineError.invalidLength
        }
        self.length = length
    }

    func area() throws -> Double {
        return 0
    }

    func perimeter() -> Double {
        return length
    }
}

class Triangle: Shape {
    let a: Double
    let b: Double
    let c: Double

    init(a: Double, b: Double, c: Double) throws {
        guard a + b > c && a + c > b && b + c > a else {
            throw TriangleError.notATriangle
        }
        self.a = a
        self.b = b
        self.c = c
    }

    func area() throws -> Double {
        let s = (a + b + c) / 2
        let result = sqrt(s * (s - a) * (s - b) * (s - c))
        if result <= 0 {
            throw ShapeError.negativeArea
        }
        return result
    }

    func perimeter() -> Double {
        return a + b + c
    }
}

class Rectangle: Shape {
    let width: Double
    let height: Double

    init(width: Double, height: Double) throws {
        guard width > 0 && height > 0 else {
            throw RectangleError.invalidDimensions
        }
        self.width = width
        self.height = height
    }

    func area() throws -> Double {
        return width * height
    }

    func perimeter() -> Double {
        return 2 * (width + height)
    }
}

class Square: Rectangle {
    init(side: Double) throws {
        try super.init(width: side, height: side)
    }
}

// MARK: - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–ª–æ—â—ñ –¥–ª—è –±—É–¥—å-—è–∫–æ—ó —Ñ—ñ–≥—É—Ä–∏

class AreaCalculator {
    func calculate(for shape: Shape) {
        do {
            let area = try shape.area()
            print("üî∑ –ü–ª–æ—â–∞ —Ñ—ñ–≥—É—Ä–∏: \(area)")
        } catch {
            print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ: \(error)")
        }
    }
}

// MARK: - –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è

func testShapes() {
    do {
        let line = try Line(length: 5)
        let triangle = try Triangle(a: 3, b: 4, c: 5)
        let rectangle = try Rectangle(width: 6, height: 2)
        let square = try Square(side: 4)

        let calculator = AreaCalculator()

        let shapes: [Shape] = [line, triangle, rectangle, square]
        for shape in shapes {
            calculator.calculate(for: shape)
        }

    } catch LineError.invalidLength {
        print("‚ùå –õ—ñ–Ω—ñ—è –º–∞—î –Ω–µ–¥—ñ–π—Å–Ω—É –¥–æ–≤–∂–∏–Ω—É")
    } catch TriangleError.notATriangle {
        print("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫ –∑ –∑–∞–¥–∞–Ω–∏–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏")
    } catch RectangleError.invalidDimensions {
        print("‚ùå –†–æ–∑–º—ñ—Ä–∏ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ")
    } catch {
        print("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: \(error)")
    }
}

// –ó–∞–ø—É—Å–∫
testShapes()
